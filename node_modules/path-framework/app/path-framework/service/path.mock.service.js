var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Injectable, Inject } from "@angular/core";
import { Http } from "@angular/http";
import { PathService } from "./path.service";
import { TranslationService } from "./translation.service";
var PathMockService = (function (_super) {
    __extends(PathMockService, _super);
    function PathMockService(http, translationService) {
        return _super.call(this, http, translationService) || this;
    }
    PathMockService.prototype.serverRequest = function (server, url, processor) {
        console.log("mock service called");
    };
    return PathMockService;
}(PathService));
PathMockService = __decorate([
    Injectable(),
    __param(0, Inject(Http)),
    __metadata("design:paramtypes", [Http, TranslationService])
], PathMockService);
export { PathMockService };
//# sourceMappingURL=path.mock.service.js.map