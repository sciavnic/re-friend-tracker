var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output } from '@angular/core';
import { ValueField } from "../value-field";
import * as moment from "moment";
var DateFieldComponent = (function () {
    function DateFieldComponent() {
    }
    return DateFieldComponent;
}());
__decorate([
    Input('field'),
    Output('field'),
    __metadata("design:type", DateField)
], DateFieldComponent.prototype, "field", void 0);
DateFieldComponent = __decorate([
    Component({
        selector: 'path-datefield',
        templateUrl: 'date-field.component.html'
    })
], DateFieldComponent);
export { DateFieldComponent };
var DateField = (function (_super) {
    __extends(DateField, _super);
    function DateField(form, translationService) {
        var _this = _super.call(this, form, translationService) || this;
        _this.form = form;
        _this.translationService = translationService;
        _this._isDatePickerVisible = false;
        return _this;
    }
    DateField.prototype.setValue = function (value) {
        if (typeof value === "string") {
            value = moment(value).toDate();
        }
        if (value != null && Object.prototype.toString.call(value) === "[object Date]") {
            // it is a date
            if (isNaN(value.getTime())) {
                value = null;
            }
            else {
                // cut off local timezone
                value = new Date(value.toDateString() + ' 00:00:00 GMT');
            }
        }
        else {
            value = null;
        }
        _super.prototype.setValue.call(this, value);
        this._datePickerValue = value;
        this.formatDate();
    };
    DateField.prototype.updateValueFromGui = function (value) {
        var dateValue = moment(value, "DD.MM.YYYY").toDate();
        this.setValue(dateValue);
    };
    DateField.prototype.toggleDatePicker = function () {
        if (!this._isDatePickerVisible) {
            var date = moment(this.value);
            if (date == null || !date.isValid()) {
                this.setValue(new Date());
            }
        }
        this._isDatePickerVisible = !this._isDatePickerVisible;
    };
    DateField.prototype.closeDatePicker = function () {
        var _this = this;
        this._isDatePickerVisible = false;
        // need to wait for updated model
        window.setTimeout(function () {
            _this.setValue(_this._datePickerValue);
            _this.formatDate();
        }, 1);
    };
    DateField.prototype.formatDate = function () {
        this._formattedValue = "";
        if (this.value != null) {
            try {
                this._formattedValue = new Intl.DateTimeFormat().format(this.value);
            }
            catch (e) {
                console.log("failed formatting date " + this.value);
            }
        }
    };
    return DateField;
}(ValueField));
export { DateField };
//# sourceMappingURL=date-field.component.js.map