var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Button } from "./button.component";
import { Component, Input, Output } from "@angular/core";
import { KeyUtility } from "../../../key-utility";
var LinkButtonComponent = (function () {
    function LinkButtonComponent() {
    }
    return LinkButtonComponent;
}());
__decorate([
    Input('button'),
    Output('button'),
    __metadata("design:type", LinkButton)
], LinkButtonComponent.prototype, "button", void 0);
LinkButtonComponent = __decorate([
    Component({
        selector: 'path-link-button',
        templateUrl: 'link-button.component.html'
    })
], LinkButtonComponent);
export { LinkButtonComponent };
var LinkButton = (function (_super) {
    __extends(LinkButton, _super);
    function LinkButton(app, pathService, translationService) {
        return _super.call(this, app, pathService, translationService) || this;
    }
    LinkButton.prototype.onClick = function () {
        var url = null;
        if (this.url.startsWith("/")) {
            // local relative url
            url = this.getApp().getBackendUrl() + this.url + "?token=" + sessionStorage.getItem("pathAppId");
        }
        else {
            // remote absolute url
            url = this.url;
        }
        window.location.assign(url);
    };
    LinkButton.prototype.fromJson = function (modelElement) {
        _super.prototype.fromJson.call(this, modelElement);
        this.type = "linkButton";
        this.url = KeyUtility.translateUrl(modelElement["url"], null, false, this.parentPageElement);
    };
    return LinkButton;
}(Button));
export { LinkButton };
//# sourceMappingURL=link-button.component.js.map