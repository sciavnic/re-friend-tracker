import * as path from './path';
import * as autocomplete from './form/field/auto-complete/auto-complete-field.component';
import 'rxjs/add/operator/map';
import { AutoCompleteFieldEntry } from "./form/field/auto-complete/auto-complete-field-entry";
import { ValueField } from "./form/field/value-field";
import { FieldListField } from "./form/field/fieldList/field-list-field.component";
import { LabelField } from "./form/field/label/label-field.component";
import { RadioGroupField } from "./form/field/radio/radio-group.component";
import { Key } from "./page/element/page-element";
import { KeyUtility } from "./key-utility";
import { FormFunction } from "./form/form-function";
import { PageLabel } from "./page/element/label/page-label.component";
import { CustomContainerPageElement } from "./page/element/custom/custom-container-page-element";
var PathAppComponent = (function () {
    function PathAppComponent(pathService, translationService) {
        var _this = this;
        this.pathService = pathService;
        this.translationService = translationService;
        this._pageStack = [];
        this._formStack = [];
        this._texts = [];
        this.pathService.serverGet(this.getBackendUrl(), "/ping", function (data) {
            var backendVersion = data["version"];
            if (backendVersion != _this.getFrontendVersion()) {
                backendVersion = "Version mismatch: Backend (" + backendVersion + "), Frontend (" + _this.getFrontendVersion() + "). Please clear cache or check server installation.";
                window.alert(backendVersion);
            }
            _this._version = backendVersion;
            if (data["userId"] != null && data["userId"] != "") {
                _this._userId = data["userId"];
                _this.setCurrentPage(_this.getStartPage(), null);
            }
            if (data["languageCode"] != null && data["languageCode"] != "") {
                sessionStorage.setItem("languageCode", data["languageCode"]);
            }
        }, function (err) { console.error(err); });
        this.loadApplicationTexts();
    }
    PathAppComponent.prototype.getApplicationLogo = function () {
        return null;
    };
    PathAppComponent.prototype.isLoading = function () {
        return this.pathService.isLoading();
    };
    PathAppComponent.prototype.loadApplicationTexts = function () {
        this._texts["Logout"] = this.translationService.getText("Logout");
        this._texts["NotSignedIn"] = this.translationService.getText("NotSignedIn");
        this._texts["SignedInAs"] = this.translationService.getText("SignedInAs");
    };
    PathAppComponent.prototype.getUserId = function () {
        return this._userId;
    };
    PathAppComponent.prototype.login = function (event, userId, password) {
        var _this = this;
        var credentials = {};
        credentials["username"] = userId;
        credentials["password"] = password;
        this.pathService.serverPost(this.getBackendUrl(), "/login", credentials, function (data) {
            console.log("login ok, language code: " + data["languageCode"] + ", jwt:" + data["jwt"]);
            sessionStorage.setItem("languageCode", data["languageCode"]);
            _this._userId = userId;
            _this.loadApplicationTexts();
            _this.setCurrentPage(_this.getStartPage(), null); // set start page
        }, function (err) {
            _this.pathService.hideLoading();
            alert("Login failed.");
            console.error("failed login");
        });
    };
    PathAppComponent.prototype.logout = function () {
        sessionStorage.clear();
        this._userId == null;
        console.log("logout user " + this._userId);
        location.reload();
    };
    PathAppComponent.prototype.showUserForm = function () {
        this.setCurrentForm(this.getOwnUserForm(), new Key(0, "userId"), null, null); // TODO set correct key
    };
    PathAppComponent.prototype.closeCurrentForm = function () {
        this._formStack.pop();
    };
    PathAppComponent.prototype.refreshCurrentPage = function () {
        for (var _i = 0, _a = this._pageStack[this._pageStack.length - 1].content; _i < _a.length; _i++) {
            var element = _a[_i];
            if (element instanceof path.List) {
                element.refresh(null);
            }
        }
        // breadcrumbs
        if (this._pageStack[this._pageStack.length - 2] != null) {
            for (var _b = 0, _c = this._pageStack[this._pageStack.length - 2].content; _b < _c.length; _b++) {
                var element = _c[_b];
                if (element instanceof path.List) {
                    element.refresh(null);
                }
            }
        }
    };
    PathAppComponent.prototype.navigateBack = function () {
        this._pageStack.pop();
        this.refreshCurrentPage();
    };
    PathAppComponent.prototype.navigateToPage = function (pageNumber) {
        for (var k = this._pageStack.length - 1; k > pageNumber; k--) {
            console.log("back");
            this.navigateBack();
        }
    };
    PathAppComponent.prototype.yesNo = function (text, yesHandler, noHandler) {
        var _this = this;
        var form = new path.Form(this.pathService, this);
        form.formFunction = new FormFunction();
        form.formFunction.save = function (data) {
            _this.closeCurrentForm();
            _this.refreshCurrentPage();
        };
        form.formFunction.cancel = function () {
            _this.closeCurrentForm();
        };
        var message = new path.TextField(form, this.translationService);
        message.type = "label";
        message.visible = true;
        message.labelVisible = false;
        message.setValue(text);
        form.fields.push(message);
        var cancelButton = new path.CancelButton(form, this.translationService);
        cancelButton.type = "cancelButton";
        cancelButton.name = this.translationService.getText("Cancel");
        cancelButton.visible = true;
        form.fields.push(cancelButton);
        var okButton = new path.OkButton(form, this.translationService);
        okButton.type = "okButton";
        okButton.name = this.translationService.getText("Ok");
        okButton.visible = true;
        okButton.handler = {
            doClick: function (button) {
                yesHandler();
            }
        };
        form.fields.push(okButton);
        form.updateRows();
        this._formStack.push(form);
    };
    PathAppComponent.prototype.getCustomComponentClass = function (componentType) {
        console.log("Please define a type mapping for " + componentType + " in your App-Component.");
        return null;
    };
    PathAppComponent.prototype.setCurrentPage = function (pageId, parentPageElement) {
        var page = null;
        for (var _i = 0, _a = this.getGuiModel().application.pageList; _i < _a.length; _i++) {
            var modelPage = _a[_i];
            if (modelPage.id == pageId) {
                page = new path.Page();
                page.id = pageId;
                page.name = this.translationService.getText(modelPage.name);
                if (parentPageElement != null) {
                    page.name = parentPageElement.name;
                }
                for (var _b = 0, _c = modelPage.elementList; _b < _c.length; _b++) {
                    var modelElement = _c[_b];
                    // element
                    var element = null;
                    switch (modelElement.type) {
                        case "button":
                        case "newButton":
                            element = new path.Button(this, this.pathService, this.translationService);
                            element.parentPageElement = parentPageElement;
                            element.fromJson(modelElement);
                            if (modelElement["buttonhandler"] != null) {
                                element.handler = new (this.getHandlers()[modelElement["buttonhandler"]]);
                            }
                            break;
                        case "deleteButton":
                            element = new path.PageDeleteButton(this, this.pathService, this.translationService);
                            element.parentPageElement = parentPageElement;
                            element.fromJson(modelElement);
                            break;
                        case "downloadButton": // deprecated
                        case "linkButton":
                            element = new path.LinkButton(this, this.pathService, this.translationService);
                            element.parentPageElement = parentPageElement;
                            element.fromJson(modelElement);
                            break;
                        case "backbutton":
                            element = new path.BackButton(this, this.pathService, this.translationService);
                            element.fromJson(modelElement);
                            break;
                        case "inlineForm":
                            var inlineForm = new path.InlineForm(this, this.pathService, this.translationService);
                            inlineForm.fromJson(modelElement);
                            inlineForm.url = KeyUtility.translateUrl(modelElement["url"], inlineForm.getKey(), true, parentPageElement);
                            inlineForm.key = parentPageElement != null ? parentPageElement.key : null;
                            inlineForm.loadNextForm(true);
                            element = inlineForm;
                            break;
                        case "list":
                            var dynamicList = new path.List(this, this.pathService, this.translationService);
                            dynamicList.parentPageElement = parentPageElement;
                            dynamicList.fromJson(modelElement);
                            // handler
                            if (modelElement["handler"] != null) {
                                dynamicList.handler = new (this.getHandlers()[modelElement["handler"]]);
                            }
                            if (modelElement["buttonhandler"] != null) {
                                dynamicList.buttonHandler = new (this.getHandlers()[modelElement["buttonhandler"]]);
                            }
                            if (!dynamicList.limit) {
                                dynamicList.refresh(null);
                            }
                            element = dynamicList;
                            break;
                        case "ChartElement":
                            var chart = new path.ChartElement(this, this.pathService, this.translationService);
                            chart.fromJson(modelElement);
                            chart.url = KeyUtility.translateUrl(modelElement["url"], null, false, parentPageElement);
                            element = chart;
                            break;
                        case "pageLabel":
                            var pageLabel = new PageLabel(this, this.pathService, this.translationService);
                            pageLabel.fromJson(modelElement);
                            element = pageLabel;
                            break;
                        default: {
                            // call method to get custom component class
                            var customContainerPageElement = new CustomContainerPageElement(this);
                            customContainerPageElement.fromJson(modelElement);
                            customContainerPageElement.typeClass = this.getCustomComponentClass(modelElement.type);
                            element = customContainerPageElement;
                        }
                    }
                    if (modelElement["permissionUrl"] != null) {
                        element.visible = false;
                        var permissionUrl = KeyUtility.translateUrl(modelElement["permissionUrl"], null, false, parentPageElement);
                        var permissionHandler = function (permissionElement) { return function (data) {
                            permissionElement.visible = data["permission"];
                        }; };
                        this.pathService.serverGet(this.getBackendUrl(), permissionUrl, permissionHandler(element), null);
                    }
                    element.type = modelElement.type;
                    element.parentPageElement = parentPageElement;
                    page.content.push(element);
                }
                page.updateRows();
            }
        }
        if (page == null && pageId != null) {
            this.pathService.addAlert("Missing page", pageId);
        }
        else {
            this._pageStack.push(page);
        }
    };
    PathAppComponent.prototype.setCurrentForm = function (formId, key, handler, parentPageElement) {
        var _this = this;
        var setCurrentForm = function () {
            // build form function
            var formFunction = new FormFunction();
            formFunction.save = function () {
                _this.closeCurrentForm();
                _this.refreshCurrentPage();
            };
            formFunction.cancel = function () {
                _this.closeCurrentForm();
            };
            formFunction.delete = function () {
                _this.closeCurrentForm();
                var parent = parentPageElement;
                if (parent != null && parent instanceof path.PageElement && parent.listElement) {
                    _this.refreshCurrentPage();
                }
                else {
                    _this.navigateBack();
                    _this.refreshCurrentPage();
                }
            };
            var form = _this.createForm(formId, key, handler, formFunction, parentPageElement);
            if (form != null) {
                _this._formStack.push(form);
            }
        };
        // check permission
        var modelForm = this.getModelForm(formId);
        if (modelForm != null && modelForm["permissionUrl"] != null) {
            var suffix = "/update";
            if (key == null) {
                suffix = "/create";
            }
            var permissionUrl = KeyUtility.translateUrl(modelForm["permissionUrl"] + suffix, key, false, parentPageElement);
            this.pathService.serverGet(this.getBackendUrl(), permissionUrl, function (data) {
                if (!data["permission"]) {
                    window.alert(_this.translationService.getText("NoPermissionError"));
                }
                else {
                    setCurrentForm();
                }
            }, null);
        }
        else {
            setCurrentForm();
        }
    };
    PathAppComponent.prototype.getModelForm = function (formId) {
        var result = null;
        for (var _i = 0, _a = this.getGuiModel().application.formList; _i < _a.length; _i++) {
            var modelForm = _a[_i];
            if (modelForm.id === formId) {
                result = modelForm;
            }
        }
        if (result == null && formId != null) {
            this.pathService.addAlert("Missing form", formId);
        }
        return result;
    };
    PathAppComponent.prototype.createForm = function (formId, key, handler, formFunction, parentPageElement) {
        var _this = this;
        var form = null;
        var modelForm = this.getModelForm(formId);
        if (modelForm != null) {
            // create form
            form = new path.Form(this.pathService, this);
            form.fromJson(modelForm);
            form.key = key;
            form.formFunction = formFunction;
            form.title = this.translationService.getText(modelForm.title);
            var _loop_1 = function () {
                // create form fields
                var formField = null;
                switch (modelFormField.type) {
                    case "text":
                        {
                            formField = new path.TextField(form, this_1.translationService);
                            formField.fromJson(modelFormField);
                            break;
                        }
                    case "translation":
                        {
                            formField = new path.TranslationField(form, this_1.pathService, this_1.translationService);
                            formField.fromJson(modelFormField);
                            break;
                        }
                    case "number":
                        {
                            formField = new path.NumberField(form, this_1.translationService);
                            formField.fromJson(modelFormField);
                            break;
                        }
                    case "label":
                        {
                            formField = new path.LabelField(form, this_1.translationService);
                            formField.fromJson(modelFormField);
                            break;
                        }
                    case "fieldList":
                        {
                            formField = new path.FieldListField(form, this_1.translationService);
                            formField.name = "list";
                            formField.fromJson(modelFormField);
                            if (modelFormField["url"] != null) {
                                var fieldListUrl = KeyUtility.translateUrl(modelFormField["url"], form.getKey(), false, parentPageElement);
                                var modelId_1 = modelFormField["id"];
                                this_1.pathService.serverGet(this_1.getBackendUrl(), fieldListUrl, function (data) {
                                    var counter = 1;
                                    for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                                        var item = data_1[_i];
                                        var dynamicField = null;
                                        if (item["type"] == "label") {
                                            dynamicField = new LabelField(form, _this.translationService);
                                        }
                                        else if (item["type"] == "text") {
                                            dynamicField = new path.TextField(form, _this.translationService);
                                        }
                                        else if (item["type"] == "translation") {
                                            dynamicField = new path.TranslationField(form, _this.pathService, _this.translationService);
                                        }
                                        else if (item["type"] == "number") {
                                            dynamicField = new path.NumberField(form, _this.translationService);
                                        }
                                        dynamicField.fromJson(item);
                                        dynamicField.name = item["name"]; // do not use translation service
                                        dynamicField.id = modelId_1 + counter;
                                        formField.subfields.push(dynamicField);
                                        counter++;
                                    }
                                    form.updateRows();
                                    formField.created = true;
                                }, null);
                            }
                            break;
                        }
                    case "date":
                        {
                            formField = new path.DateField(form, this_1.translationService);
                            formField.fromJson(modelFormField);
                            break;
                        }
                    case "autocomplete":
                        {
                            var autoCompleteFormField = new autocomplete.AutoCompleteField(form, this_1.translationService, this_1.pathService);
                            autoCompleteFormField.detailForm = modelFormField["form"];
                            autoCompleteFormField.wordSearchEnabled = modelFormField["wordSearchEnabled"];
                            if (modelFormField["data"] != null) {
                                var data = [];
                                var k = 0;
                                for (var _i = 0, _a = modelFormField["data"]; _i < _a.length; _i++) {
                                    var item = _a[_i];
                                    var entry = new AutoCompleteFieldEntry();
                                    entry.text = item;
                                    entry.key = k;
                                    data.push(entry);
                                    k++;
                                }
                                autoCompleteFormField.data = data;
                                autoCompleteFormField.dataLoaded = true;
                            }
                            else if (modelFormField["url"] != null) {
                                var autoCompleteFormFieldUrl = KeyUtility.translateUrl(modelFormField["url"], form.key, false, parentPageElement);
                                autoCompleteFormField.url = autoCompleteFormFieldUrl;
                                autoCompleteFormField.load();
                            }
                            else {
                                autoCompleteFormField.dataLoaded = true;
                            }
                            formField = autoCompleteFormField;
                            formField.fromJson(modelFormField);
                            break;
                        }
                    case "RadioGroupField":
                        {
                            var radioGroupFormField = new path.RadioGroupField(form, this_1.translationService);
                            if (modelFormField["url"] != null) {
                                var radiosUrl = KeyUtility.translateUrl(modelFormField["url"], form.getKey(), false, parentPageElement);
                                var radioLoader = function (rgField) { return function (data) {
                                    for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                                        var item = data_2[_i];
                                        var radio = new path.Radio(form, _this.translationService);
                                        radio.name = item["name"];
                                        radio.key = item["key"]["key"].toString(); // force radio key type string for angular2
                                        if (radio.key == item["defaultKey"]) {
                                            rgField.setValue(radio.key);
                                        }
                                        rgField.radios.push(radio);
                                    }
                                    rgField.created = true;
                                    console.log("radio group field created: " + rgField.id);
                                }; };
                                var radioLoaderForField = radioLoader(radioGroupFormField);
                                this_1.pathService.serverGet(this_1.getBackendUrl(), radiosUrl, radioLoaderForField, null);
                            }
                            else {
                                radioGroupFormField.created = true;
                            }
                            radioGroupFormField.fromJson(modelFormField);
                            formField = radioGroupFormField;
                            break;
                        }
                    case "CheckboxGroupField":
                        {
                            var checkboxGroupField = new path.CheckboxGroupField(form, this_1.translationService);
                            checkboxGroupField.fromJson(modelFormField);
                            formField = checkboxGroupField;
                            break;
                        }
                    case "ProgressBarField":
                        {
                            var progressBarField = new path.ProgressBarField(form, this_1.translationService);
                            progressBarField.fromJson(modelFormField);
                            formField = progressBarField;
                            break;
                        }
                    case "okButton":
                        {
                            formField = new path.OkButton(form, this_1.translationService);
                            formField.fromJson(modelFormField);
                            break;
                        }
                    case "cancelButton":
                        {
                            formField = new path.CancelButton(form, this_1.translationService);
                            formField.fromJson(modelFormField);
                            break;
                        }
                    case "deleteButton":
                        {
                            formField = new path.FormDeleteButton(form, this_1.translationService);
                            formField.fromJson(modelFormField);
                            if (form.key == null) {
                                formField.visible = false;
                            }
                            break;
                        }
                    case "previousButton":
                        {
                            formField = new path.PreviousButton(form, this_1.translationService);
                            formField.fromJson(modelFormField);
                            if (form.key == null) {
                                formField.visible = false;
                            }
                            break;
                        }
                    default:
                        {
                            formField = new path.FormField(form, this_1.translationService);
                            formField.fromJson(modelFormField);
                        }
                }
                // Field permission (move code to FormField)
                if (modelFormField["permissionUrl"] != null) {
                    formField.readonly = false;
                    var permissionUrl = KeyUtility.translateUrl(modelFormField["permissionUrl"], formField.getForm().getKey(), false, parentPageElement);
                    var permissionHandler = function (permissionElement) { return function (data) {
                        permissionElement.readonly = !data["permission"];
                    }; };
                    this_1.pathService.serverGet(formField.getForm().getApp().getBackendUrl(), permissionUrl, permissionHandler(formField), null);
                }
                // search parents for defaultKey
                if (formField instanceof ValueField && modelFormField["defaultKey"] != null) {
                    var pageElement = parentPageElement;
                    while (pageElement != null) {
                        if (pageElement.getKey() != null && pageElement.getKey().getName() == modelFormField["defaultKey"]) {
                            formField.setValue(pageElement.getKey().getKey());
                            formField.isInitialValueSet = true;
                            pageElement = null;
                        }
                        else {
                            pageElement = pageElement.getParent();
                        }
                    }
                }
                form.fields.push(formField);
            };
            var this_1 = this;
            for (var _i = 0, _a = modelForm.formFieldList; _i < _a.length; _i++) {
                var modelFormField = _a[_i];
                _loop_1();
            }
            form.updateRows();
            // fetch data from backend
            if (form.url != null && form.key != null) {
                form.url = KeyUtility.translateUrl(form.url, form.getKey(), true, parentPageElement);
                this.pathService.serverGet(this.getBackendUrl(), form.url, function (data) {
                    var _loop_2 = function (field) {
                        if (data[field.id] != null && field instanceof path.ValueField) {
                            if (field instanceof RadioGroupField) {
                                // TODO general solution
                                var setValueOfRadioGroupFieldContextWrapper_1 = function () {
                                    var f = field;
                                    var v = data[field.id];
                                    //noinspection TypeScriptUnresolvedFunction
                                    setValueOfRadioGroupField_1(f, v);
                                };
                                var setValueOfRadioGroupField_1 = function (radioGroupField, value) {
                                    if (!radioGroupField.created) {
                                        console.log("Waiting for RadioGroupField " + radioGroupField.id);
                                        console.log(radioGroupField.created);
                                        window.setTimeout(setValueOfRadioGroupFieldContextWrapper_1, 50); // wait then try again
                                        return;
                                    }
                                    console.log("setting radiogroupfield value");
                                    if (value != null) {
                                        value = value.toString(); // force radio key type string for angular2
                                    }
                                    radioGroupField.setValue(value);
                                    radioGroupField.isInitialValueSet = true;
                                };
                                setValueOfRadioGroupFieldContextWrapper_1();
                            }
                            else {
                                field.setValue(data[field.id]);
                                field.isInitialValueSet = true;
                            }
                        }
                        if (field instanceof FieldListField) {
                            var setValueOfFieldListFieldContextWrapper_1 = function () {
                                var f = field;
                                var d = data;
                                //noinspection TypeScriptUnresolvedFunction
                                setValueOfFieldListField_1(f, d);
                            };
                            var setValueOfFieldListField_1 = function (fieldListField, value) {
                                if (!field.created) {
                                    console.log("Waiting for FieldListField... ");
                                    setTimeout(setValueOfFieldListFieldContextWrapper_1, 50); // wait then try again
                                    return;
                                }
                                // update fields
                                for (var _i = 0, _a = field.subfields; _i < _a.length; _i++) {
                                    var subfield = _a[_i];
                                    if (data[subfield.id] != null) {
                                        subfield.setValue(data[subfield.id]);
                                        subfield.isInitialValueSet = true;
                                    }
                                }
                            };
                            setValueOfFieldListFieldContextWrapper_1();
                        }
                    };
                    for (var _i = 0, _a = form.fields; _i < _a.length; _i++) {
                        var field = _a[_i];
                        _loop_2(field);
                    }
                }, null);
            }
            // execute handler
            var handlerName = handler;
            if (handlerName == null) {
                handlerName = formId + 'Handler';
            }
            if (this.getBeans()[formId] != null && this.getHandlers()[handlerName] != null) {
                var formBean = new (this.getBeans()[formId]);
                var formHandler = new (this.getHandlers()[handlerName]);
                for (var a = 0; a < form.fields.length; a++) {
                    if (form.fields[a].id != null) {
                        formBean[form.fields[a].id] = form.fields[a];
                    }
                }
                form.bean = formBean;
                formHandler.doLoad(form.bean);
                form.handler = formHandler;
            }
        }
        return form;
    };
    return PathAppComponent;
}());
export { PathAppComponent };
//# sourceMappingURL=path-app.component.js.map