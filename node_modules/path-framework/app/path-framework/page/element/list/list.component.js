var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output } from "@angular/core";
import { Key, PageElement } from "../page-element";
import { KeyUtility } from "../../../key-utility";
import { Button } from "../button/button.component";
import { LinkButton } from "../button/link-button.component";
import { FocusUtility } from "../../../form/focus-utility";
import { Subject } from "rxjs/Subject";
var ListComponent = (function () {
    function ListComponent() {
    }
    ListComponent.prototype.ngAfterViewInit = function () {
        FocusUtility.focusFirstField(null);
    };
    return ListComponent;
}());
__decorate([
    Input('list'),
    Output('list'),
    __metadata("design:type", List)
], ListComponent.prototype, "list", void 0);
ListComponent = __decorate([
    Component({
        selector: 'path-list',
        templateUrl: 'list.component.html'
    })
], ListComponent);
export { ListComponent };
var List = (function (_super) {
    __extends(List, _super);
    function List(app, pathService, translationService) {
        var _this = _super.call(this, app) || this;
        _this.pathService = pathService;
        _this.translationService = translationService;
        _this._buttons = [];
        _this._searchTextChanged = new Subject();
        _this._searchLabel = translationService.getText("Search");
        _this._searchInputLabel = translationService.getText("SearchInputLabel");
        return _this;
    }
    List.prototype.getContent = function () {
        return this.buttons;
    };
    List.prototype.refresh = function (searchText) {
        var _this = this;
        // callback function for data
        console.log("refresh list");
        var dataHandler = function (data) {
            var oldButtons = _this.buttons;
            _this.buttons = [];
            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                var item = data_1[_i];
                var itemKey = new Key(item["key"]["key"], item["key"]["name"]);
                var button = _this.findButton(itemKey, oldButtons);
                if (button == null) {
                    // create button
                    if (item["type"] == null || item["type"] == "button") {
                        button = new Button(_this.app, _this.pathService, _this.translationService);
                    }
                    else if (item["type"] == "linkButton") {
                        button = new LinkButton(_this.app, _this.pathService, _this.translationService);
                    }
                }
                // build button from json
                button.parentPageElement = _this.parentPageElement;
                button.listElement = true;
                button.fromJson(item);
                // special defaults for list buttons
                button.setKey(itemKey);
                button.handler = _this._buttonHandler;
                button.name = item.name; // no translation
                button.tooltip = item.tooltip; // no translation
                button.url = KeyUtility.translateUrl(item["url"] != null ? item["url"] : button.url, null, false, button);
                button.setIcon(item["icon"] != null ? item["icon"] : (button.icon == null ? _this.icon : button.icon));
                button.setColor(item["color"] != null ? item["color"] : (button.color == null ? _this.color : button.color));
                // special default width (2 instead of 1) for buttons in list
                if (item["width"] == null) {
                    button.width = 2;
                }
                // form button
                if (_this.form != null) {
                    button.setForm(_this.form);
                    button.setFormHandler(_this.formHandler);
                }
                // page button
                button.setPage(item["page"] != null ? item["page"] : _this.page);
                _this.buttons.push(button);
            }
            if (_this.handler != null) {
                _this.handler.doLoad(_this); // TODO useful?
            }
            if (_this.limit) {
                _this.setSearchResultsCountMessage();
            }
        };
        var listHandlerDoLoad = function (list) { return function (data) { return dataHandler(data); }; };
        // backend data
        if (this._url != null) {
            var urlParameters = '';
            if (searchText || this.limit) {
                urlParameters = '?search=' + (searchText == null ? "" : encodeURI(searchText)) + "&limit=" + this.limit;
            }
            this.pathService.serverGet(this.app.getBackendUrl(), this.url + urlParameters, listHandlerDoLoad(this), null);
        }
        // mock data
        if (this._mockData != null) {
            var count = 0;
            // fake a key for mock data
            for (var _i = 0, _a = this.mockData; _i < _a.length; _i++) {
                var mock = _a[_i];
                count++;
                if (mock["key"] == null) {
                    mock["key"] = count;
                }
            }
            dataHandler(this.mockData);
        }
    };
    List.prototype.findButton = function (key, buttons) {
        for (var _i = 0, buttons_1 = buttons; _i < buttons_1.length; _i++) {
            var button = buttons_1[_i];
            if (button.key.getKey() == key.getKey() && button.key.getName() == key.getName()) {
                return button;
            }
        }
        return null;
    };
    List.prototype.filterChanged = function (text) {
        this._searchTextChanged.next(text);
    };
    List.prototype.filter = function () {
        this._searchLabel = this.translationService.getText("Search");
        if (this._searchText == "*") {
            this.refresh(null);
        }
        else if (this.limit) {
            // call server to filter data
            if (!this._searchText) {
                this._buttons = [];
            }
            else if (this._searchText == "*") {
                this.refresh(null);
            }
            else if (this._searchText && this._searchText.length >= 2) {
                this.refresh(this._searchText);
            }
            else {
                this._searchLabel = this.translationService.getText("SearchTextTooShort");
                this._buttons = [];
            }
        }
        else {
            // filter loaded data only
            var searchText = this._searchText.toLowerCase();
            for (var _i = 0, _a = this._buttons; _i < _a.length; _i++) {
                var button = _a[_i];
                button.visible = true;
                if (searchText.length > 0) {
                    var newVisible = button.name.toLowerCase().indexOf(searchText) != -1;
                    if (!newVisible) {
                        for (var _b = 0, _c = button.details; _b < _c.length; _b++) {
                            var detail = _c[_b];
                            if (detail.text.toLowerCase().indexOf(searchText) != -1) {
                                newVisible = true;
                                break;
                            }
                        }
                    }
                    button.visible = newVisible;
                    this.setSearchResultsCountMessage();
                }
            }
        }
    };
    List.prototype.setSearchResultsCountMessage = function () {
        this._searchLabel = this.visibleItemSize() + " " + (this.visibleItemSize() == 1 ? this.translationService.getText("Result") : this.translationService.getText("Results"));
    };
    List.prototype.visibleItemSize = function () {
        var result = 0;
        for (var _i = 0, _a = this.buttons; _i < _a.length; _i++) {
            var button = _a[_i];
            if (button.visible) {
                result++;
            }
        }
        return result;
    };
    Object.defineProperty(List.prototype, "buttons", {
        get: function () {
            return this._buttons;
        },
        set: function (value) {
            this._buttons = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "search", {
        get: function () {
            return this._search;
        },
        set: function (value) {
            this._search = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "handler", {
        get: function () {
            return this._handler;
        },
        set: function (value) {
            this._handler = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "buttonHandler", {
        get: function () {
            return this._buttonHandler;
        },
        set: function (value) {
            this._buttonHandler = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        set: function (value) {
            this._icon = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "color", {
        get: function () {
            return this._color;
        },
        set: function (value) {
            this._color = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "form", {
        get: function () {
            return this._form;
        },
        set: function (value) {
            this._form = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "formHandler", {
        get: function () {
            return this._formHandler;
        },
        set: function (value) {
            this._formHandler = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "page", {
        get: function () {
            return this._page;
        },
        set: function (value) {
            this._page = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "mockData", {
        get: function () {
            return this._mockData;
        },
        set: function (value) {
            this._mockData = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "url", {
        get: function () {
            return this._url;
        },
        set: function (value) {
            this._url = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "limit", {
        get: function () {
            return this._limit;
        },
        set: function (value) {
            this._limit = value;
        },
        enumerable: true,
        configurable: true
    });
    List.prototype.fromJson = function (modelElement) {
        var _this = this;
        _super.prototype.fromJson.call(this, modelElement);
        if (modelElement["search"] != null) {
            this.search = modelElement["search"];
        }
        if (modelElement["color"] != null) {
            this.color = modelElement["color"];
        }
        if (modelElement["form"] != null) {
            this.form = modelElement["form"]["form"];
            this.formHandler = modelElement["form"]["handler"];
        }
        if (modelElement["page"] != null) {
            this.page = modelElement["page"];
        }
        if (modelElement["icon"] != null) {
            this.icon = modelElement["icon"];
        }
        if (modelElement["data"] != null) {
            this.mockData = modelElement["data"];
        }
        if (modelElement["name"] != null) {
            this.name = this.translationService.getText(modelElement["name"]);
        }
        if (modelElement["url"] != null) {
            var urlString = modelElement["url"];
            this.url = KeyUtility.translateUrl(urlString, null, false, this.parentPageElement);
        }
        if (modelElement["limit"] != null) {
            this.limit = modelElement["limit"];
        }
        // delay for search field
        var debounceTime = this.limit ? 300 : 30;
        this._searchTextChanged
            .debounceTime(debounceTime) // wait after the last event before emitting last event
            .subscribe(function (_searchText) {
            _this._searchText = _searchText;
            _this.filter();
        });
    };
    return List;
}(PageElement));
export { List };
//# sourceMappingURL=list.component.js.map