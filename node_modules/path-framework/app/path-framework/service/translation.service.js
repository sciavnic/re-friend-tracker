var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from "@angular/core";
var TranslationService = (function () {
    function TranslationService() {
        this.translationMap = this.createTranslationMap(this.getTranslations());
    }
    TranslationService.prototype.getText = function (key) {
        var parameters = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            parameters[_i - 1] = arguments[_i];
        }
        if (this.getTranslation(key) == null) {
            return "{" + key + "}";
        }
        var result = this.getTranslation(key);
        var k = 0;
        for (var _a = 0, parameters_1 = parameters; _a < parameters_1.length; _a++) {
            var parameter = parameters_1[_a];
            result = result.replace("{" + k + "}", parameter);
            k++;
        }
        return result;
    };
    TranslationService.prototype.getTranslation = function (key) {
        return this.translationMap.get(key);
    };
    TranslationService.prototype.createTranslationMap = function (data) {
        var result = new Map();
        for (var item in data) {
            result.set(item, data[item]);
        }
        return result;
    };
    TranslationService.prototype.getUserLanguage = function () {
        var languageCode = sessionStorage.getItem("languageCode");
        return languageCode;
    };
    TranslationService.prototype.getSupportedLanguageCodes = function () {
        return ["de", "en"];
    };
    TranslationService.prototype.getTranslations = function () {
        var languageCode = this.getUserLanguage();
        if (languageCode == "de") {
            return {
                "Back": "Zurück",
                "Cancel": "Abbrechen",
                "Delete": "Löschen",
                "DeleteWarningQuestion": "Wollen Sie diesen Datensatz löschen?",
                "Detail": "Detail",
                "Logout": "Abmelden",
                "MainMenu": "Hauptmenü",
                "New": "Neu",
                "NotSignedIn": "Nicht angemeldet",
                "Ok": "OK",
                "Result": "Resultat",
                "Results": "Resultate",
                "Search": "Suche",
                "SearchInputLabel": "Suchbegriff",
                "SearchTextTooShort": "Suchbegriff zu kurz",
                "SignedInAs": "Angemeldet als",
                "Translation": "Übersetzung",
                "Translations": "Übersetzungen",
                "de": "Deutsch",
                "en": "Englisch",
            };
        }
        else {
            return {
                "Back": "Back",
                "Cancel": "Cancel",
                "Delete": "Delete",
                "DeleteWarningQuestion": "Do you want to delete this item?",
                "Detail": "Detail",
                "Logout": "Logout",
                "MainMenu": "Main Menu",
                "New": "New",
                "NotSignedIn": "Not signed in",
                "Ok": "Ok",
                "Result": "Result",
                "Results": "Results",
                "Search": "Search",
                "SearchInputLabel": "Enter search text",
                "SearchTextTooShort": "Search text too short",
                "SignedInAs": "Signed in as",
                "Translation": "Translation",
                "Translations": "Translations",
                "de": "German",
                "en": "English",
            };
        }
    };
    return TranslationService;
}());
TranslationService = __decorate([
    Injectable()
], TranslationService);
export { TranslationService };
//# sourceMappingURL=translation.service.js.map