var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import * as path from '../../../path';
import { Input, Output, Component } from "@angular/core";
import { KeyUtility } from "../../../key-utility";
import { ButtonDetail } from "./button-detail";
var ButtonComponent = (function () {
    function ButtonComponent() {
    }
    return ButtonComponent;
}());
__decorate([
    Input('button'),
    Output('button'),
    __metadata("design:type", Button)
], ButtonComponent.prototype, "button", void 0);
ButtonComponent = __decorate([
    Component({
        selector: 'path-button',
        templateUrl: 'button.component.html'
    })
], ButtonComponent);
export { ButtonComponent };
var Button = (function (_super) {
    __extends(Button, _super);
    function Button(app, pathService, translationService) {
        var _this = _super.call(this, app) || this;
        _this.pathService = pathService;
        _this.translationService = translationService;
        _this._details = [];
        return _this;
    }
    Button.prototype.onClick = function () {
        var _this = this;
        if (this._handler != null) {
            this._handler.doClick(this);
            return;
        }
        if (this._url != null) {
            this.pathService.serverGet(this.app.getBackendUrl(), this._url, function () {
                _this.app.refreshCurrentPage();
            }, null);
        }
        if (this._page != null) {
            this.app.setCurrentPage(this._page, this);
            return;
        }
        if (this._form != null) {
            this.app.setCurrentForm(this._form, this.key, this._formHandler, this);
            return;
        }
    };
    Button.prototype.setColor = function (color) {
        this.color = color;
    };
    Button.prototype.getColor = function () {
        return this.color;
    };
    Button.prototype.setIcon = function (icon) {
        this.icon = icon;
    };
    Button.prototype.setForm = function (form) {
        this.form = form;
    };
    Button.prototype.setFormHandler = function (formHandler) {
        this.formHandler = formHandler;
    };
    Button.prototype.setPage = function (page) {
        this.page = page;
    };
    Button.prototype.setKey = function (key) {
        this.key = key;
    };
    Button.prototype.getApp = function () {
        return this.app;
    };
    Button.prototype.getName = function () {
        return this.name;
    };
    Object.defineProperty(Button.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        set: function (value) {
            this._icon = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "color", {
        get: function () {
            return this._color;
        },
        set: function (value) {
            this._color = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "handler", {
        get: function () {
            return this._handler;
        },
        set: function (value) {
            this._handler = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "details", {
        get: function () {
            return this._details;
        },
        set: function (value) {
            this._details = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "page", {
        get: function () {
            return this._page;
        },
        set: function (value) {
            this._page = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "form", {
        get: function () {
            return this._form;
        },
        set: function (value) {
            this._form = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "formHandler", {
        get: function () {
            return this._formHandler;
        },
        set: function (value) {
            this._formHandler = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "url", {
        get: function () {
            return this._url;
        },
        set: function (value) {
            this._url = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "tooltip", {
        get: function () {
            return this._tooltip;
        },
        set: function (value) {
            this._tooltip = value;
        },
        enumerable: true,
        configurable: true
    });
    Button.prototype.fromJson = function (modelElement) {
        _super.prototype.fromJson.call(this, modelElement);
        // general attributes
        this.type = "button";
        this.setIcon(modelElement["icon"]);
        this.setColor(modelElement["color"]);
        if (modelElement["form"] != null) {
            this.setForm(modelElement["form"]["form"]);
            this.setFormHandler(modelElement["form"]["handler"]);
        }
        this.setPage(modelElement["page"]);
        if (this.parentPageElement != null && modelElement.type == "button") {
            this.key = this.parentPageElement.key;
        }
        this.name = this.translationService.getText(modelElement["name"]);
        this.url = KeyUtility.translateUrl(modelElement["url"], null, false, this.parentPageElement);
        if (modelElement["tooltip"] != null) {
            this.tooltip = this.translationService.getText(modelElement["tooltip"]);
        }
        // button details
        if (modelElement["details"] != null) {
            this.details = [];
            for (var _i = 0, _a = modelElement["details"]; _i < _a.length; _i++) {
                var detail = _a[_i];
                var bd = new ButtonDetail();
                bd.text = detail;
                this.details.push(bd);
            }
        }
    };
    return Button;
}(path.PageElement));
export { Button };
//# sourceMappingURL=button.component.js.map