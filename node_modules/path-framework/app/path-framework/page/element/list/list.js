var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as path from '../../../path';
import { Key } from "../page-element";
import { KeyUtility } from "../../../key-utility";
var List = (function (_super) {
    __extends(List, _super);
    function List(app, pathService, translationService) {
        var _this = _super.call(this, app) || this;
        _this.pathService = pathService;
        _this.translationService = translationService;
        _this._buttons = [];
        _this._searchLabel = translationService.getText("Search");
        _this._searchInputLabel = translationService.getText("SearchInputLabel");
        return _this;
    }
    List.prototype.getContent = function () {
        return this.buttons;
    };
    List.prototype.refresh = function () {
        var _this = this;
        // callback function for data
        console.log("refresh list");
        var dataHandler = function (data) {
            var oldButtons = _this.buttons;
            _this.buttons = [];
            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                var item = data_1[_i];
                var itemKey = new Key(item["key"]["key"], item["key"]["name"]);
                var button = _this.findButton(itemKey, oldButtons);
                if (button == null) {
                    // create button
                    if (item["type"] == null || item["type"] == "button") {
                        button = new path.Button(_this.app, _this.pathService, _this.translationService);
                    }
                    else if (item["type"] == "linkButton") {
                        button = new path.LinkButton(_this.app, _this.pathService, _this.translationService);
                    }
                }
                // build button from json
                button.parentPageElement = _this.parentPageElement;
                button.listElement = true;
                button.fromJson(item);
                // special defaults for list buttons
                button.setKey(itemKey);
                button.handler = _this._buttonHandler;
                button.name = item.name; // no translation
                button.url = KeyUtility.translateUrl(item["url"] != null ? item["url"] : button.url, null, false, button);
                button.setIcon(item["icon"] != null ? item["icon"] : (button.icon == null ? _this.icon : button.icon));
                button.setColor(item["color"] != null ? item["color"] : (button.color == null ? _this.color : button.color));
                // special default width (2 instead of 1) for buttons in list
                if (item["width"] == null) {
                    button.width = 2;
                }
                // form button
                if (_this.form != null) {
                    button.setForm(_this.form);
                    button.setFormHandler(_this.formHandler);
                }
                // page button
                button.setPage(_this.page);
                _this.buttons.push(button);
            }
            if (_this.handler != null) {
                _this.handler.doLoad(_this); // TODO useful?
            }
        };
        var listHandlerDoLoad = function (list) { return function (data) { return dataHandler(data); }; };
        // backend data
        if (this._url != null) {
            this.pathService.serverGet(this.app.getBackendUrl(), this.url, listHandlerDoLoad(this), null);
        }
        // mock data
        if (this._mockData != null) {
            var count = 0;
            // fake a key for mock data
            for (var _i = 0, _a = this.mockData; _i < _a.length; _i++) {
                var mock = _a[_i];
                count++;
                if (mock["key"] == null) {
                    mock["key"] = count;
                }
            }
            dataHandler(this.mockData);
        }
    };
    List.prototype.findButton = function (key, buttons) {
        for (var _i = 0, buttons_1 = buttons; _i < buttons_1.length; _i++) {
            var button = buttons_1[_i];
            if (button.key.getKey() == key.getKey() && button.key.getName() == key.getName()) {
                return button;
            }
        }
        return null;
    };
    List.prototype.filter = function () {
        var searchText = this._searchText.toLowerCase();
        for (var _i = 0, _a = this._buttons; _i < _a.length; _i++) {
            var button = _a[_i];
            button.visible = true;
            if (searchText.length > 0) {
                var newVisible = button.name.toLowerCase().indexOf(searchText) != -1;
                if (!newVisible) {
                    for (var _b = 0, _c = button.details; _b < _c.length; _b++) {
                        var detail = _c[_b];
                        if (detail.text.toLowerCase().indexOf(searchText) != -1) {
                            newVisible = true;
                            break;
                        }
                    }
                }
                button.visible = newVisible;
            }
        }
    };
    Object.defineProperty(List.prototype, "buttons", {
        get: function () {
            return this._buttons;
        },
        set: function (value) {
            this._buttons = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "search", {
        get: function () {
            return this._search;
        },
        set: function (value) {
            this._search = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "handler", {
        get: function () {
            return this._handler;
        },
        set: function (value) {
            this._handler = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "buttonHandler", {
        get: function () {
            return this._buttonHandler;
        },
        set: function (value) {
            this._buttonHandler = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        set: function (value) {
            this._icon = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "color", {
        get: function () {
            return this._color;
        },
        set: function (value) {
            this._color = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "form", {
        get: function () {
            return this._form;
        },
        set: function (value) {
            this._form = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "formHandler", {
        get: function () {
            return this._formHandler;
        },
        set: function (value) {
            this._formHandler = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "page", {
        get: function () {
            return this._page;
        },
        set: function (value) {
            this._page = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "mockData", {
        get: function () {
            return this._mockData;
        },
        set: function (value) {
            this._mockData = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "url", {
        get: function () {
            return this._url;
        },
        set: function (value) {
            this._url = value;
        },
        enumerable: true,
        configurable: true
    });
    return List;
}(path.PageElement));
export { List };
//# sourceMappingURL=list.js.map