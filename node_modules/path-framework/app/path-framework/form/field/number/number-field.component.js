var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output } from '@angular/core';
import { ValueField } from "../value-field";
var NumberFieldComponent = (function () {
    function NumberFieldComponent() {
    }
    return NumberFieldComponent;
}());
__decorate([
    Input('field'),
    Output('field'),
    __metadata("design:type", NumberField)
], NumberFieldComponent.prototype, "field", void 0);
NumberFieldComponent = __decorate([
    Component({
        selector: 'path-numberfield',
        templateUrl: 'number-field.component.html'
    })
], NumberFieldComponent);
export { NumberFieldComponent };
var NumberField = (function (_super) {
    __extends(NumberField, _super);
    function NumberField() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NumberField.prototype, "min", {
        get: function () {
            return this._min;
        },
        set: function (value) {
            this._min = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberField.prototype, "max", {
        get: function () {
            return this._max;
        },
        set: function (value) {
            this._max = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberField.prototype, "digits", {
        get: function () {
            return this._digits;
        },
        set: function (value) {
            this._digits = value;
        },
        enumerable: true,
        configurable: true
    });
    NumberField.prototype.getStep = function () {
        if (this._digits == null) {
            return "";
        }
        else if (this._digits == 0) {
            return "0";
        }
        // e.g. 3 => 0.001
        var step = "0.";
        for (var k = 0; k < this._digits - 1; k++) {
            step = step + "0";
        }
        return step + "1";
    };
    NumberField.prototype.fromJson = function (modelFormField) {
        _super.prototype.fromJson.call(this, modelFormField);
        if (modelFormField["min"] != null) {
            this.min = modelFormField["min"];
        }
        if (modelFormField["max"] != null) {
            this.max = modelFormField["max"];
        }
        if (modelFormField["digits"] != null) {
            this.digits = modelFormField["digits"];
        }
    };
    return NumberField;
}(ValueField));
export { NumberField };
//# sourceMappingURL=number-field.component.js.map